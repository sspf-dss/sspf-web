/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get/addresses"];
        put?: never;
        post: operations["post/addresses"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get/addresses/{id}"];
        put: operations["put/addresses/{id}"];
        post?: never;
        delete: operations["delete/addresses/{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get/courses"];
        put?: never;
        post: operations["post/courses"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get/courses/{id}"];
        put: operations["put/courses/{id}"];
        post?: never;
        delete: operations["delete/courses/{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/course-infos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get/course-infos"];
        put?: never;
        post: operations["post/course-infos"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/course-infos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get/course-infos/{id}"];
        put: operations["put/course-infos/{id}"];
        post?: never;
        delete: operations["delete/course-infos/{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get/instructors"];
        put?: never;
        post: operations["post/instructors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instructors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get/instructors/{id}"];
        put: operations["put/instructors/{id}"];
        post?: never;
        delete: operations["delete/instructors/{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/registrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get/registrations"];
        put?: never;
        post: operations["post/registrations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/registrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get/registrations/{id}"];
        put: operations["put/registrations/{id}"];
        post?: never;
        delete: operations["delete/registrations/{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upload files */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Upload files */
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** @description The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). */
                        path?: string;
                        /** @description The ID of the entry which the file(s) will be linked to */
                        refId?: string;
                        /** @description The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant). */
                        ref?: string;
                        /** @description The field of the entry which the file(s) will be precisely linked to. */
                        field?: string;
                        files: string[];
                    };
                };
            };
            responses: {
                /** @description response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UploadFile"][];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/upload?id={id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upload file information */
        post: {
            parameters: {
                query: {
                    /** @description File id */
                    id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Upload files */
            requestBody: {
                content: {
                    "multipart/form-data": {
                        fileInfo?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                        };
                        /** Format: binary */
                        files?: string;
                    };
                };
            };
            responses: {
                /** @description response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UploadFile"][];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/upload/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get a list of files */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UploadFile"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/upload/files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get a specific file */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UploadFile"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Delete a file */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UploadFile"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connect/{provider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Login with a provider
         * @description Redirects to provider login before being redirect to /auth/{provider}/callback
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Provider name */
                    provider: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirect response */
                301: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/local": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Local login
         * @description Returns a jwt token and user info
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "identifier": "foobar",
                     *       "password": "Test1234"
                     *     } */
                    "application/json": {
                        identifier?: string;
                        password?: string;
                    };
                };
            };
            responses: {
                /** @description Connection */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/local/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a user
         * @description Returns a jwt token and user info
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "username": "foobar",
                     *       "email": "foo.bar@strapi.io",
                     *       "password": "Test1234"
                     *     } */
                    "application/json": {
                        username?: string;
                        email?: string;
                        password?: string;
                    };
                };
            };
            responses: {
                /** @description Successful registration */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/{provider}/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Default Callback from provider auth */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Provider name */
                    provider: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns a jwt token and user info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send rest password email */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "email": "foo.bar@strapi.io"
                     *     } */
                    "application/json": {
                        email?: string;
                    };
                };
            };
            responses: {
                /** @description Returns ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            ok?: true;
                        };
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rest user password */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "password": "Test1234",
                     *       "passwordConfirmation": "Test1234",
                     *       "code": "zertyoaizndoianzodianzdonaizdoinaozdnia"
                     *     } */
                    "application/json": {
                        password?: string;
                        passwordConfirmation?: string;
                        code?: string;
                    };
                };
            };
            responses: {
                /** @description Returns a jwt token and user info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update user's own password */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        password: string;
                        currentPassword: string;
                        passwordConfirmation: string;
                    };
                };
            };
            responses: {
                /** @description Returns a jwt token and user info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email-confirmation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Confirm user email */
        get: {
            parameters: {
                query?: {
                    /** @description confirmation token received by email */
                    confirmation?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirects to the configure email confirmation redirect url */
                301: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/send-email-confirmation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send confirmation email */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        email?: string;
                    };
                };
            };
            responses: {
                /** @description Returns email and boolean to confirm email was sent */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            email?: string;
                            /** @enum {string} */
                            sent?: true;
                        };
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users-permissions/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get default generated permissions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the permissions tree */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "permissions": {
                         *         "api::content-type.content-type": {
                         *           "controllers": {
                         *             "controllerA": {
                         *               "find": {
                         *                 "enabled": false,
                         *                 "policy": ""
                         *               },
                         *               "findOne": {
                         *                 "enabled": false,
                         *                 "policy": ""
                         *               },
                         *               "create": {
                         *                 "enabled": false,
                         *                 "policy": ""
                         *               }
                         *             },
                         *             "controllerB": {
                         *               "find": {
                         *                 "enabled": false,
                         *                 "policy": ""
                         *               },
                         *               "findOne": {
                         *                 "enabled": false,
                         *                 "policy": ""
                         *               },
                         *               "create": {
                         *                 "enabled": false,
                         *                 "policy": ""
                         *               }
                         *             }
                         *           }
                         *         }
                         *       }
                         *     } */
                        "application/json": {
                            permissions?: components["schemas"]["Users-Permissions-PermissionsTree"];
                        };
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users-permissions/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List roles */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns list of roles */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "roles": [
                         *         {
                         *           "id": 1,
                         *           "name": "Public",
                         *           "description": "Default role given to unauthenticated user.",
                         *           "type": "public",
                         *           "createdAt": "2022-05-19T17:35:35.097Z",
                         *           "updatedAt": "2022-05-31T16:05:36.603Z",
                         *           "nb_users": 0
                         *         }
                         *       ]
                         *     } */
                        "application/json": {
                            roles?: (components["schemas"]["Users-Permissions-Role"] & {
                                nb_users?: number;
                            })[];
                        };
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        /** Create a role */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Users-Permissions-RoleRequest"];
            responses: {
                /** @description Returns ok if the role was create */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            ok?: true;
                        };
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users-permissions/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a role */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description role Id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the role */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "role": {
                         *         "id": 1,
                         *         "name": "Public",
                         *         "description": "Default role given to unauthenticated user.",
                         *         "type": "public",
                         *         "createdAt": "2022-05-19T17:35:35.097Z",
                         *         "updatedAt": "2022-05-31T16:05:36.603Z",
                         *         "permissions": {
                         *           "api::content-type.content-type": {
                         *             "controllers": {
                         *               "controllerA": {
                         *                 "find": {
                         *                   "enabled": true
                         *                 }
                         *               }
                         *             }
                         *           }
                         *         }
                         *       }
                         *     } */
                        "application/json": {
                            role?: components["schemas"]["Users-Permissions-Role"];
                        };
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users-permissions/roles/{role}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a role */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description role Id */
                    role: string;
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Users-Permissions-RoleRequest"];
            responses: {
                /** @description Returns ok if the role was udpated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            ok?: true;
                        };
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a role */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description role Id */
                    role: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns ok if the role was delete */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            ok?: true;
                        };
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns an array of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example [
                         *       {
                         *         "id": 9,
                         *         "username": "foao@strapi.io",
                         *         "email": "foao@strapi.io",
                         *         "provider": "local",
                         *         "confirmed": false,
                         *         "blocked": false,
                         *         "createdAt": "2022-06-01T18:32:35.211Z",
                         *         "updatedAt": "2022-06-01T18:32:35.217Z"
                         *       }
                         *     ] */
                        "application/json": components["schemas"]["Users-Permissions-User"][];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        /** Create a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "username": "foo",
                     *       "email": "foo@strapi.io",
                     *       "password": "foo-password"
                     *     } */
                    "application/json": {
                        email: string;
                        username: string;
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Returns created user info */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "id": 1,
                         *       "username": "foo",
                         *       "email": "foo@strapi.io",
                         *       "provider": "local",
                         *       "confirmed": false,
                         *       "blocked": false,
                         *       "createdAt": "2022-05-19T17:35:35.096Z",
                         *       "updatedAt": "2022-05-19T17:35:35.096Z",
                         *       "role": {
                         *         "id": 1,
                         *         "name": "X",
                         *         "description": "Default role given to authenticated user.",
                         *         "type": "authenticated",
                         *         "createdAt": "2022-05-19T17:35:35.096Z",
                         *         "updatedAt": "2022-06-04T07:11:59.551Z"
                         *       }
                         *     } */
                        "application/json": components["schemas"]["Users-Permissions-User"] & {
                            role?: components["schemas"]["Users-Permissions-Role"];
                        };
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description user Id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns a user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "id": 1,
                         *       "username": "foo",
                         *       "email": "foo@strapi.io",
                         *       "provider": "local",
                         *       "confirmed": false,
                         *       "blocked": false,
                         *       "createdAt": "2022-05-19T17:35:35.096Z",
                         *       "updatedAt": "2022-05-19T17:35:35.096Z"
                         *     } */
                        "application/json": components["schemas"]["Users-Permissions-User"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** Update a user */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description user Id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "username": "foo",
                     *       "email": "foo@strapi.io",
                     *       "password": "foo-password"
                     *     } */
                    "application/json": {
                        email: string;
                        username: string;
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Returns updated user info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "id": 1,
                         *       "username": "foo",
                         *       "email": "foo@strapi.io",
                         *       "provider": "local",
                         *       "confirmed": false,
                         *       "blocked": false,
                         *       "createdAt": "2022-05-19T17:35:35.096Z",
                         *       "updatedAt": "2022-05-19T17:35:35.096Z",
                         *       "role": {
                         *         "id": 1,
                         *         "name": "X",
                         *         "description": "Default role given to authenticated user.",
                         *         "type": "authenticated",
                         *         "createdAt": "2022-05-19T17:35:35.096Z",
                         *         "updatedAt": "2022-06-04T07:11:59.551Z"
                         *       }
                         *     } */
                        "application/json": components["schemas"]["Users-Permissions-User"] & {
                            role?: components["schemas"]["Users-Permissions-Role"];
                        };
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description user Id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns deleted user info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "id": 1,
                         *       "username": "foo",
                         *       "email": "foo@strapi.io",
                         *       "provider": "local",
                         *       "confirmed": false,
                         *       "blocked": false,
                         *       "createdAt": "2022-05-19T17:35:35.096Z",
                         *       "updatedAt": "2022-05-19T17:35:35.096Z"
                         *     } */
                        "application/json": components["schemas"]["Users-Permissions-User"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get authenticated user info */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns user info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "id": 1,
                         *       "username": "foo",
                         *       "email": "foo@strapi.io",
                         *       "provider": "local",
                         *       "confirmed": false,
                         *       "blocked": false,
                         *       "createdAt": "2022-05-19T17:35:35.096Z",
                         *       "updatedAt": "2022-05-19T17:35:35.096Z"
                         *     } */
                        "application/json": components["schemas"]["Users-Permissions-User"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user count */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns a number */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example 1 */
                        "application/json": number;
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            data?: (Record<string, never> | Record<string, never>[]) | null;
            error: {
                status?: number;
                name?: string;
                message?: string;
                details?: Record<string, never>;
            };
        };
        AddressRequest: {
            data: {
                line1?: string;
                line2?: string;
                taxId?: string;
                companyName?: string;
                contaceName?: string;
                subDistrice?: string;
                district?: string;
                province?: string;
                zip?: string;
                /** @example string or id */
                users_permissions_user?: number | string;
                title?: string;
                locale?: string;
                localizations?: (number | string)[];
            };
        };
        AddressListResponse: {
            data?: components["schemas"]["Address"][];
            meta?: {
                pagination?: {
                    page?: number;
                    pageSize?: number;
                    pageCount?: number;
                    total?: number;
                };
            };
        };
        Address: {
            id?: number;
            documentId?: string;
            line1?: string;
            line2?: string;
            taxId?: string;
            companyName?: string;
            contaceName?: string;
            subDistrice?: string;
            district?: string;
            province?: string;
            zip?: string;
            users_permissions_user?: {
                id?: number;
                documentId?: string;
                username?: string;
                /** Format: email */
                email?: string;
                provider?: string;
                resetPasswordToken?: string;
                confirmationToken?: string;
                confirmed?: boolean;
                blocked?: boolean;
                role?: {
                    id?: number;
                    documentId?: string;
                    name?: string;
                    description?: string;
                    type?: string;
                    permissions?: {
                        id?: number;
                        documentId?: string;
                        action?: string;
                        role?: {
                            id?: number;
                            documentId?: string;
                        };
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                            firstname?: string;
                            lastname?: string;
                            username?: string;
                            /** Format: email */
                            email?: string;
                            resetPasswordToken?: string;
                            registrationToken?: string;
                            isActive?: boolean;
                            roles?: {
                                id?: number;
                                documentId?: string;
                                name?: string;
                                code?: string;
                                description?: string;
                                users?: {
                                    id?: number;
                                    documentId?: string;
                                }[];
                                permissions?: {
                                    id?: number;
                                    documentId?: string;
                                    action?: string;
                                    actionParameters?: unknown;
                                    subject?: string;
                                    properties?: unknown;
                                    conditions?: unknown;
                                    role?: {
                                        id?: number;
                                        documentId?: string;
                                    };
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    /** Format: date-time */
                                    publishedAt?: string;
                                    createdBy?: {
                                        id?: number;
                                        documentId?: string;
                                    };
                                    updatedBy?: {
                                        id?: number;
                                        documentId?: string;
                                    };
                                    locale?: string;
                                    localizations?: {
                                        id?: number;
                                        documentId?: string;
                                    }[];
                                }[];
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                updatedBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                locale?: string;
                                localizations?: {
                                    id?: number;
                                    documentId?: string;
                                }[];
                            }[];
                            blocked?: boolean;
                            preferedLanguage?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            updatedBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            locale?: string;
                            localizations?: {
                                id?: number;
                                documentId?: string;
                            }[];
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    }[];
                    users?: {
                        id?: number;
                        documentId?: string;
                    }[];
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                };
                addresses?: {
                    id?: number;
                    documentId?: string;
                    line1?: string;
                    line2?: string;
                    taxId?: string;
                    companyName?: string;
                    contaceName?: string;
                    subDistrice?: string;
                    district?: string;
                    province?: string;
                    zip?: string;
                    users_permissions_user?: {
                        id?: number;
                        documentId?: string;
                    };
                    title?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                }[];
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                    id?: number;
                    documentId?: string;
                };
                updatedBy?: {
                    id?: number;
                    documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                }[];
            };
            title?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
                id?: number;
                documentId?: string;
            };
            updatedBy?: {
                id?: number;
                documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
            }[];
        };
        AddressResponse: {
            data?: components["schemas"]["Address"];
            meta?: Record<string, never>;
        };
        CourseRequest: {
            data: {
                name: string;
                /** Format: date */
                startDate?: string;
                /** Format: date */
                endDate?: string;
                fee?: number;
                isFull?: boolean;
                /** Format: date */
                openRegisterDate?: string;
                /** Format: date */
                endRegisterDate?: string;
                participantNumber?: number;
                isOpen?: boolean;
                instructors?: (number | string)[];
                registrations?: (number | string)[];
                /** @example string or id */
                course_info?: number | string;
                locale?: string;
                localizations?: (number | string)[];
            };
        };
        CourseListResponse: {
            data?: components["schemas"]["Course"][];
            meta?: {
                pagination?: {
                    page?: number;
                    pageSize?: number;
                    pageCount?: number;
                    total?: number;
                };
            };
        };
        Course: {
            id?: number;
            documentId?: string;
            name: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            fee?: number;
            isFull?: boolean;
            /** Format: date */
            openRegisterDate?: string;
            /** Format: date */
            endRegisterDate?: string;
            participantNumber?: number;
            isOpen?: boolean;
            instructors?: {
                id?: number;
                documentId?: string;
                title?: string;
                firstName?: string;
                lastName?: string;
                /** Format: email */
                email?: string;
                phone?: string;
                bankAccountNumber?: string;
                bankAccountName?: string;
                bankAccount?: string;
                remark?: string;
                displayName?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                    id?: number;
                    documentId?: string;
                    firstname?: string;
                    lastname?: string;
                    username?: string;
                    /** Format: email */
                    email?: string;
                    resetPasswordToken?: string;
                    registrationToken?: string;
                    isActive?: boolean;
                    roles?: {
                        id?: number;
                        documentId?: string;
                        name?: string;
                        code?: string;
                        description?: string;
                        users?: {
                            id?: number;
                            documentId?: string;
                        }[];
                        permissions?: {
                            id?: number;
                            documentId?: string;
                            action?: string;
                            actionParameters?: unknown;
                            subject?: string;
                            properties?: unknown;
                            conditions?: unknown;
                            role?: {
                                id?: number;
                                documentId?: string;
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            updatedBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            locale?: string;
                            localizations?: {
                                id?: number;
                                documentId?: string;
                            }[];
                        }[];
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    }[];
                    blocked?: boolean;
                    preferedLanguage?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                };
                updatedBy?: {
                    id?: number;
                    documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                }[];
            }[];
            registrations?: {
                id?: number;
                documentId?: string;
                course?: {
                    id?: number;
                    documentId?: string;
                    name?: string;
                    /** Format: date */
                    startDate?: string;
                    /** Format: date */
                    endDate?: string;
                    fee?: number;
                    isFull?: boolean;
                    /** Format: date */
                    openRegisterDate?: string;
                    /** Format: date */
                    endRegisterDate?: string;
                    participantNumber?: number;
                    isOpen?: boolean;
                    instructors?: {
                        id?: number;
                        documentId?: string;
                    }[];
                    registrations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                    course_info?: {
                        id?: number;
                        documentId?: string;
                        course?: {
                            id?: number;
                            documentId?: string;
                        };
                        description?: unknown;
                        objective?: unknown;
                        requirement?: unknown;
                        outline?: unknown;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                };
                users_permissions_user?: {
                    id?: number;
                    documentId?: string;
                    username?: string;
                    /** Format: email */
                    email?: string;
                    provider?: string;
                    resetPasswordToken?: string;
                    confirmationToken?: string;
                    confirmed?: boolean;
                    blocked?: boolean;
                    role?: {
                        id?: number;
                        documentId?: string;
                        name?: string;
                        description?: string;
                        type?: string;
                        permissions?: {
                            id?: number;
                            documentId?: string;
                            action?: string;
                            role?: {
                                id?: number;
                                documentId?: string;
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            updatedBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            locale?: string;
                            localizations?: {
                                id?: number;
                                documentId?: string;
                            }[];
                        }[];
                        users?: {
                            id?: number;
                            documentId?: string;
                        }[];
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    };
                    addresses?: {
                        id?: number;
                        documentId?: string;
                        line1?: string;
                        line2?: string;
                        taxId?: string;
                        companyName?: string;
                        contaceName?: string;
                        subDistrice?: string;
                        district?: string;
                        province?: string;
                        zip?: string;
                        users_permissions_user?: {
                            id?: number;
                            documentId?: string;
                        };
                        title?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    }[];
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                };
                /** Format: date-time */
                registedDate?: string;
                /** @enum {string} */
                registerStatus?: "REGISTERED" | "PAYMENT_PENDING" | "PAYMENT_RECEIVED" | "ENROLLED" | "WAIT_LIST";
                uploads?: {
                    id?: number;
                    documentId?: string;
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                        id?: number;
                        documentId?: string;
                    }[];
                    folder?: {
                        id?: number;
                        documentId?: string;
                        name?: string;
                        pathId?: number;
                        parent?: {
                            id?: number;
                            documentId?: string;
                        };
                        children?: {
                            id?: number;
                            documentId?: string;
                        }[];
                        files?: {
                            id?: number;
                            documentId?: string;
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                                id?: number;
                                documentId?: string;
                            }[];
                            folder?: {
                                id?: number;
                                documentId?: string;
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            updatedBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            locale?: string;
                            localizations?: {
                                id?: number;
                                documentId?: string;
                            }[];
                        }[];
                        path?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                }[];
                receipt?: {
                    id?: number;
                    documentId?: string;
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                        id?: number;
                        documentId?: string;
                    }[];
                    folder?: {
                        id?: number;
                        documentId?: string;
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                    id?: number;
                    documentId?: string;
                };
                updatedBy?: {
                    id?: number;
                    documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                }[];
            }[];
            course_info?: {
                id?: number;
                documentId?: string;
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
                id?: number;
                documentId?: string;
            };
            updatedBy?: {
                id?: number;
                documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
            }[];
        };
        CourseResponse: {
            data?: components["schemas"]["Course"];
            meta?: Record<string, never>;
        };
        CourseInfoRequest: {
            data: {
                /** @example string or id */
                course?: number | string;
                description?: unknown;
                objective?: unknown;
                requirement?: unknown;
                outline?: unknown;
                locale?: string;
                localizations?: (number | string)[];
            };
        };
        CourseInfoListResponse: {
            data?: components["schemas"]["CourseInfo"][];
            meta?: {
                pagination?: {
                    page?: number;
                    pageSize?: number;
                    pageCount?: number;
                    total?: number;
                };
            };
        };
        CourseInfo: {
            id?: number;
            documentId?: string;
            course?: {
                id?: number;
                documentId?: string;
                name?: string;
                /** Format: date */
                startDate?: string;
                /** Format: date */
                endDate?: string;
                fee?: number;
                isFull?: boolean;
                /** Format: date */
                openRegisterDate?: string;
                /** Format: date */
                endRegisterDate?: string;
                participantNumber?: number;
                isOpen?: boolean;
                instructors?: {
                    id?: number;
                    documentId?: string;
                    title?: string;
                    firstName?: string;
                    lastName?: string;
                    /** Format: email */
                    email?: string;
                    phone?: string;
                    bankAccountNumber?: string;
                    bankAccountName?: string;
                    bankAccount?: string;
                    remark?: string;
                    displayName?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                        firstname?: string;
                        lastname?: string;
                        username?: string;
                        /** Format: email */
                        email?: string;
                        resetPasswordToken?: string;
                        registrationToken?: string;
                        isActive?: boolean;
                        roles?: {
                            id?: number;
                            documentId?: string;
                            name?: string;
                            code?: string;
                            description?: string;
                            users?: {
                                id?: number;
                                documentId?: string;
                            }[];
                            permissions?: {
                                id?: number;
                                documentId?: string;
                                action?: string;
                                actionParameters?: unknown;
                                subject?: string;
                                properties?: unknown;
                                conditions?: unknown;
                                role?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                updatedBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                locale?: string;
                                localizations?: {
                                    id?: number;
                                    documentId?: string;
                                }[];
                            }[];
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            updatedBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            locale?: string;
                            localizations?: {
                                id?: number;
                                documentId?: string;
                            }[];
                        }[];
                        blocked?: boolean;
                        preferedLanguage?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                }[];
                registrations?: {
                    id?: number;
                    documentId?: string;
                    course?: {
                        id?: number;
                        documentId?: string;
                    };
                    users_permissions_user?: {
                        id?: number;
                        documentId?: string;
                        username?: string;
                        /** Format: email */
                        email?: string;
                        provider?: string;
                        resetPasswordToken?: string;
                        confirmationToken?: string;
                        confirmed?: boolean;
                        blocked?: boolean;
                        role?: {
                            id?: number;
                            documentId?: string;
                            name?: string;
                            description?: string;
                            type?: string;
                            permissions?: {
                                id?: number;
                                documentId?: string;
                                action?: string;
                                role?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                updatedBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                locale?: string;
                                localizations?: {
                                    id?: number;
                                    documentId?: string;
                                }[];
                            }[];
                            users?: {
                                id?: number;
                                documentId?: string;
                            }[];
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            updatedBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            locale?: string;
                            localizations?: {
                                id?: number;
                                documentId?: string;
                            }[];
                        };
                        addresses?: {
                            id?: number;
                            documentId?: string;
                            line1?: string;
                            line2?: string;
                            taxId?: string;
                            companyName?: string;
                            contaceName?: string;
                            subDistrice?: string;
                            district?: string;
                            province?: string;
                            zip?: string;
                            users_permissions_user?: {
                                id?: number;
                                documentId?: string;
                            };
                            title?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            updatedBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            locale?: string;
                            localizations?: {
                                id?: number;
                                documentId?: string;
                            }[];
                        }[];
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    };
                    /** Format: date-time */
                    registedDate?: string;
                    /** @enum {string} */
                    registerStatus?: "REGISTERED" | "PAYMENT_PENDING" | "PAYMENT_RECEIVED" | "ENROLLED" | "WAIT_LIST";
                    uploads?: {
                        id?: number;
                        documentId?: string;
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                            id?: number;
                            documentId?: string;
                        }[];
                        folder?: {
                            id?: number;
                            documentId?: string;
                            name?: string;
                            pathId?: number;
                            parent?: {
                                id?: number;
                                documentId?: string;
                            };
                            children?: {
                                id?: number;
                                documentId?: string;
                            }[];
                            files?: {
                                id?: number;
                                documentId?: string;
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                    id?: number;
                                    documentId?: string;
                                }[];
                                folder?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                updatedBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                locale?: string;
                                localizations?: {
                                    id?: number;
                                    documentId?: string;
                                }[];
                            }[];
                            path?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            updatedBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            locale?: string;
                            localizations?: {
                                id?: number;
                                documentId?: string;
                            }[];
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    }[];
                    receipt?: {
                        id?: number;
                        documentId?: string;
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                            id?: number;
                            documentId?: string;
                        }[];
                        folder?: {
                            id?: number;
                            documentId?: string;
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                }[];
                course_info?: {
                    id?: number;
                    documentId?: string;
                    course?: {
                        id?: number;
                        documentId?: string;
                    };
                    description?: unknown;
                    objective?: unknown;
                    requirement?: unknown;
                    outline?: unknown;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                    id?: number;
                    documentId?: string;
                };
                updatedBy?: {
                    id?: number;
                    documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                }[];
            };
            description?: unknown;
            objective?: unknown;
            requirement?: unknown;
            outline?: unknown;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
                id?: number;
                documentId?: string;
            };
            updatedBy?: {
                id?: number;
                documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
            }[];
        };
        CourseInfoResponse: {
            data?: components["schemas"]["CourseInfo"];
            meta?: Record<string, never>;
        };
        InstructorRequest: {
            data: {
                title?: string;
                firstName?: string;
                lastName?: string;
                /** Format: email */
                email?: string;
                phone?: string;
                bankAccountNumber?: string;
                bankAccountName?: string;
                bankAccount?: string;
                remark?: string;
                displayName?: string;
                locale?: string;
                localizations?: (number | string)[];
            };
        };
        InstructorListResponse: {
            data?: components["schemas"]["Instructor"][];
            meta?: {
                pagination?: {
                    page?: number;
                    pageSize?: number;
                    pageCount?: number;
                    total?: number;
                };
            };
        };
        Instructor: {
            id?: number;
            documentId?: string;
            title?: string;
            firstName?: string;
            lastName?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            bankAccountNumber?: string;
            bankAccountName?: string;
            bankAccount?: string;
            remark?: string;
            displayName?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
                id?: number;
                documentId?: string;
                firstname?: string;
                lastname?: string;
                username?: string;
                /** Format: email */
                email?: string;
                resetPasswordToken?: string;
                registrationToken?: string;
                isActive?: boolean;
                roles?: {
                    id?: number;
                    documentId?: string;
                    name?: string;
                    code?: string;
                    description?: string;
                    users?: {
                        id?: number;
                        documentId?: string;
                    }[];
                    permissions?: {
                        id?: number;
                        documentId?: string;
                        action?: string;
                        actionParameters?: unknown;
                        subject?: string;
                        properties?: unknown;
                        conditions?: unknown;
                        role?: {
                            id?: number;
                            documentId?: string;
                        };
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    }[];
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                }[];
                blocked?: boolean;
                preferedLanguage?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                    id?: number;
                    documentId?: string;
                };
                updatedBy?: {
                    id?: number;
                    documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                }[];
            };
            updatedBy?: {
                id?: number;
                documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
                title?: string;
                firstName?: string;
                lastName?: string;
                /** Format: email */
                email?: string;
                phone?: string;
                bankAccountNumber?: string;
                bankAccountName?: string;
                bankAccount?: string;
                remark?: string;
                displayName?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                    id?: number;
                    documentId?: string;
                };
                updatedBy?: {
                    id?: number;
                    documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                }[];
            }[];
        };
        InstructorResponse: {
            data?: components["schemas"]["Instructor"];
            meta?: Record<string, never>;
        };
        RegistrationRequest: {
            data: {
                /** @example string or id */
                course?: number | string;
                /** @example string or id */
                users_permissions_user?: number | string;
                /** Format: date-time */
                registedDate?: string;
                /** @enum {string} */
                registerStatus?: "REGISTERED" | "PAYMENT_PENDING" | "PAYMENT_RECEIVED" | "ENROLLED" | "WAIT_LIST";
                uploads?: (number | string)[];
                /** @example string or id */
                receipt?: number | string;
                locale?: string;
                localizations?: (number | string)[];
            };
        };
        RegistrationListResponse: {
            data?: components["schemas"]["Registration"][];
            meta?: {
                pagination?: {
                    page?: number;
                    pageSize?: number;
                    pageCount?: number;
                    total?: number;
                };
            };
        };
        Registration: {
            id?: number;
            documentId?: string;
            course?: {
                id?: number;
                documentId?: string;
                name?: string;
                /** Format: date */
                startDate?: string;
                /** Format: date */
                endDate?: string;
                fee?: number;
                isFull?: boolean;
                /** Format: date */
                openRegisterDate?: string;
                /** Format: date */
                endRegisterDate?: string;
                participantNumber?: number;
                isOpen?: boolean;
                instructors?: {
                    id?: number;
                    documentId?: string;
                    title?: string;
                    firstName?: string;
                    lastName?: string;
                    /** Format: email */
                    email?: string;
                    phone?: string;
                    bankAccountNumber?: string;
                    bankAccountName?: string;
                    bankAccount?: string;
                    remark?: string;
                    displayName?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                        firstname?: string;
                        lastname?: string;
                        username?: string;
                        /** Format: email */
                        email?: string;
                        resetPasswordToken?: string;
                        registrationToken?: string;
                        isActive?: boolean;
                        roles?: {
                            id?: number;
                            documentId?: string;
                            name?: string;
                            code?: string;
                            description?: string;
                            users?: {
                                id?: number;
                                documentId?: string;
                            }[];
                            permissions?: {
                                id?: number;
                                documentId?: string;
                                action?: string;
                                actionParameters?: unknown;
                                subject?: string;
                                properties?: unknown;
                                conditions?: unknown;
                                role?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                updatedBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                locale?: string;
                                localizations?: {
                                    id?: number;
                                    documentId?: string;
                                }[];
                            }[];
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            updatedBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            locale?: string;
                            localizations?: {
                                id?: number;
                                documentId?: string;
                            }[];
                        }[];
                        blocked?: boolean;
                        preferedLanguage?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                }[];
                registrations?: {
                    id?: number;
                    documentId?: string;
                    course?: {
                        id?: number;
                        documentId?: string;
                    };
                    users_permissions_user?: {
                        id?: number;
                        documentId?: string;
                        username?: string;
                        /** Format: email */
                        email?: string;
                        provider?: string;
                        resetPasswordToken?: string;
                        confirmationToken?: string;
                        confirmed?: boolean;
                        blocked?: boolean;
                        role?: {
                            id?: number;
                            documentId?: string;
                            name?: string;
                            description?: string;
                            type?: string;
                            permissions?: {
                                id?: number;
                                documentId?: string;
                                action?: string;
                                role?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                updatedBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                locale?: string;
                                localizations?: {
                                    id?: number;
                                    documentId?: string;
                                }[];
                            }[];
                            users?: {
                                id?: number;
                                documentId?: string;
                            }[];
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            updatedBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            locale?: string;
                            localizations?: {
                                id?: number;
                                documentId?: string;
                            }[];
                        };
                        addresses?: {
                            id?: number;
                            documentId?: string;
                            line1?: string;
                            line2?: string;
                            taxId?: string;
                            companyName?: string;
                            contaceName?: string;
                            subDistrice?: string;
                            district?: string;
                            province?: string;
                            zip?: string;
                            users_permissions_user?: {
                                id?: number;
                                documentId?: string;
                            };
                            title?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            updatedBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            locale?: string;
                            localizations?: {
                                id?: number;
                                documentId?: string;
                            }[];
                        }[];
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    };
                    /** Format: date-time */
                    registedDate?: string;
                    /** @enum {string} */
                    registerStatus?: "REGISTERED" | "PAYMENT_PENDING" | "PAYMENT_RECEIVED" | "ENROLLED" | "WAIT_LIST";
                    uploads?: {
                        id?: number;
                        documentId?: string;
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                            id?: number;
                            documentId?: string;
                        }[];
                        folder?: {
                            id?: number;
                            documentId?: string;
                            name?: string;
                            pathId?: number;
                            parent?: {
                                id?: number;
                                documentId?: string;
                            };
                            children?: {
                                id?: number;
                                documentId?: string;
                            }[];
                            files?: {
                                id?: number;
                                documentId?: string;
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                    id?: number;
                                    documentId?: string;
                                }[];
                                folder?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                updatedBy?: {
                                    id?: number;
                                    documentId?: string;
                                };
                                locale?: string;
                                localizations?: {
                                    id?: number;
                                    documentId?: string;
                                }[];
                            }[];
                            path?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            updatedBy?: {
                                id?: number;
                                documentId?: string;
                            };
                            locale?: string;
                            localizations?: {
                                id?: number;
                                documentId?: string;
                            }[];
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    }[];
                    receipt?: {
                        id?: number;
                        documentId?: string;
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                            id?: number;
                            documentId?: string;
                        }[];
                        folder?: {
                            id?: number;
                            documentId?: string;
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        updatedBy?: {
                            id?: number;
                            documentId?: string;
                        };
                        locale?: string;
                        localizations?: {
                            id?: number;
                            documentId?: string;
                        }[];
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                }[];
                course_info?: {
                    id?: number;
                    documentId?: string;
                    course?: {
                        id?: number;
                        documentId?: string;
                    };
                    description?: unknown;
                    objective?: unknown;
                    requirement?: unknown;
                    outline?: unknown;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    updatedBy?: {
                        id?: number;
                        documentId?: string;
                    };
                    locale?: string;
                    localizations?: {
                        id?: number;
                        documentId?: string;
                    }[];
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                    id?: number;
                    documentId?: string;
                };
                updatedBy?: {
                    id?: number;
                    documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                }[];
            };
            users_permissions_user?: {
                id?: number;
                documentId?: string;
            };
            /** Format: date-time */
            registedDate?: string;
            /** @enum {string} */
            registerStatus?: "REGISTERED" | "PAYMENT_PENDING" | "PAYMENT_RECEIVED" | "ENROLLED" | "WAIT_LIST";
            uploads?: {
                id?: number;
                documentId?: string;
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                    id?: number;
                    documentId?: string;
                }[];
                folder?: {
                    id?: number;
                    documentId?: string;
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                    id?: number;
                    documentId?: string;
                };
                updatedBy?: {
                    id?: number;
                    documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                }[];
            }[];
            receipt?: {
                id?: number;
                documentId?: string;
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                    id?: number;
                    documentId?: string;
                }[];
                folder?: {
                    id?: number;
                    documentId?: string;
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                    id?: number;
                    documentId?: string;
                };
                updatedBy?: {
                    id?: number;
                    documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                }[];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
                id?: number;
                documentId?: string;
            };
            updatedBy?: {
                id?: number;
                documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
            }[];
        };
        RegistrationResponse: {
            data?: components["schemas"]["Registration"];
            meta?: Record<string, never>;
        };
        UploadFile: {
            id?: number;
            name?: string;
            alternativeText?: string;
            caption?: string;
            /** Format: integer */
            width?: number;
            /** Format: integer */
            height?: number;
            formats?: number;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: double */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: Record<string, never>;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        "Users-Permissions-Role": {
            id?: number;
            name?: string;
            description?: string;
            type?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        "Users-Permissions-User": {
            /** @example 1 */
            id?: number;
            /** @example foo.bar */
            username?: string;
            /** @example foo.bar@strapi.io */
            email?: string;
            /** @example local */
            provider?: string;
            /** @example true */
            confirmed?: boolean;
            /** @example false */
            blocked?: boolean;
            /**
             * Format: date-time
             * @example 2022-06-02T08:32:06.258Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2022-06-02T08:32:06.267Z
             */
            updatedAt?: string;
        };
        "Users-Permissions-UserRegistration": {
            /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
            jwt?: string;
            user?: components["schemas"]["Users-Permissions-User"];
        };
        "Users-Permissions-PermissionsTree": {
            [key: string]: {
                /** @description every controller of the api */
                controllers?: {
                    [key: string]: {
                        [key: string]: {
                            enabled?: boolean;
                            policy?: string;
                        };
                    };
                };
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: {
        "Users-Permissions-RoleRequest": {
            content: {
                /** @example {
                 *       "name": "foo",
                 *       "description": "role foo",
                 *       "permissions": {
                 *         "api::content-type.content-type": {
                 *           "controllers": {
                 *             "controllerA": {
                 *               "find": {
                 *                 "enabled": true
                 *               }
                 *             }
                 *           }
                 *         }
                 *       }
                 *     } */
                "application/json": {
                    name?: string;
                    description?: string;
                    type?: string;
                    permissions?: components["schemas"]["Users-Permissions-PermissionsTree"];
                };
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get/addresses": {
        parameters: {
            query?: {
                /** @description Sort by attributes ascending (asc) or descending (desc) */
                sort?: string;
                /** @description Return page/pageSize (default: true) */
                "pagination[withCount]"?: boolean;
                /** @description Page number (default: 0) */
                "pagination[page]"?: number;
                /** @description Page size (default: 25) */
                "pagination[pageSize]"?: number;
                /** @description Offset value (default: 0) */
                "pagination[start]"?: number;
                /** @description Number of entities to return (default: 25) */
                "pagination[limit]"?: number;
                /** @description Fields to return (ex: title,author) */
                fields?: string;
                /** @description Relations to return */
                populate?: string;
                /** @description Filters to apply */
                filters?: {
                    [key: string]: unknown;
                };
                /** @description Locale to apply */
                locale?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "post/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddressRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "get/addresses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "put/addresses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddressRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "delete/addresses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "get/courses": {
        parameters: {
            query?: {
                /** @description Sort by attributes ascending (asc) or descending (desc) */
                sort?: string;
                /** @description Return page/pageSize (default: true) */
                "pagination[withCount]"?: boolean;
                /** @description Page number (default: 0) */
                "pagination[page]"?: number;
                /** @description Page size (default: 25) */
                "pagination[pageSize]"?: number;
                /** @description Offset value (default: 0) */
                "pagination[start]"?: number;
                /** @description Number of entities to return (default: 25) */
                "pagination[limit]"?: number;
                /** @description Fields to return (ex: title,author) */
                fields?: string;
                /** @description Relations to return */
                populate?: string;
                /** @description Filters to apply */
                filters?: {
                    [key: string]: unknown;
                };
                /** @description Locale to apply */
                locale?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "post/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CourseRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "get/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "put/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CourseRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "delete/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "get/course-infos": {
        parameters: {
            query?: {
                /** @description Sort by attributes ascending (asc) or descending (desc) */
                sort?: string;
                /** @description Return page/pageSize (default: true) */
                "pagination[withCount]"?: boolean;
                /** @description Page number (default: 0) */
                "pagination[page]"?: number;
                /** @description Page size (default: 25) */
                "pagination[pageSize]"?: number;
                /** @description Offset value (default: 0) */
                "pagination[start]"?: number;
                /** @description Number of entities to return (default: 25) */
                "pagination[limit]"?: number;
                /** @description Fields to return (ex: title,author) */
                fields?: string;
                /** @description Relations to return */
                populate?: string;
                /** @description Filters to apply */
                filters?: {
                    [key: string]: unknown;
                };
                /** @description Locale to apply */
                locale?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseInfoListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "post/course-infos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CourseInfoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseInfoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "get/course-infos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseInfoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "put/course-infos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CourseInfoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseInfoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "delete/course-infos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "get/instructors": {
        parameters: {
            query?: {
                /** @description Sort by attributes ascending (asc) or descending (desc) */
                sort?: string;
                /** @description Return page/pageSize (default: true) */
                "pagination[withCount]"?: boolean;
                /** @description Page number (default: 0) */
                "pagination[page]"?: number;
                /** @description Page size (default: 25) */
                "pagination[pageSize]"?: number;
                /** @description Offset value (default: 0) */
                "pagination[start]"?: number;
                /** @description Number of entities to return (default: 25) */
                "pagination[limit]"?: number;
                /** @description Fields to return (ex: title,author) */
                fields?: string;
                /** @description Relations to return */
                populate?: string;
                /** @description Filters to apply */
                filters?: {
                    [key: string]: unknown;
                };
                /** @description Locale to apply */
                locale?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InstructorListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "post/instructors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InstructorRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InstructorResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "get/instructors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InstructorResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "put/instructors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InstructorRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InstructorResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "delete/instructors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "get/registrations": {
        parameters: {
            query?: {
                /** @description Sort by attributes ascending (asc) or descending (desc) */
                sort?: string;
                /** @description Return page/pageSize (default: true) */
                "pagination[withCount]"?: boolean;
                /** @description Page number (default: 0) */
                "pagination[page]"?: number;
                /** @description Page size (default: 25) */
                "pagination[pageSize]"?: number;
                /** @description Offset value (default: 0) */
                "pagination[start]"?: number;
                /** @description Number of entities to return (default: 25) */
                "pagination[limit]"?: number;
                /** @description Fields to return (ex: title,author) */
                fields?: string;
                /** @description Relations to return */
                populate?: string;
                /** @description Filters to apply */
                filters?: {
                    [key: string]: unknown;
                };
                /** @description Locale to apply */
                locale?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegistrationListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "post/registrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegistrationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegistrationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "get/registrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegistrationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "put/registrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegistrationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegistrationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "delete/registrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
